// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TillCheckoutSystem.Tests.TestFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CheckoutSystemTestFeature")]
    public partial class CheckoutSystemTestFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CheckoutSystem.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CheckoutSystemTestFeature", @"	In order to test the checkout functionality of a restaurant till
	As a tester
	I want to verify the checkout system can Add, update, delete and calculate correct cost based on the quantity specified.

	Add Scenario    - Verifies that new list items are added and in case the same items are already present then validates quantities are updated accordingly.
	Update Scenario - Verifies quantities of the items within the list are correctly updated.
	Delete Scenario - Verifies that list items are removed as expected based on the quantity passed in by the test. Validates that item is removed if the quantity is same or greater than.
	Total Cost		- Validates that total cost is calculated correctly.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify total cost calculation from a list of menu items")]
        [NUnit.Framework.CategoryAttribute("totalCostPositive")]
        public virtual void VerifyTotalCostCalculationFromAListOfMenuItems()
        {
            string[] tagsOfScenario = new string[] {
                    "totalCostPositive"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify total cost calculation from a list of menu items", null, new string[] {
                        "totalCostPositive"});
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table1.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "2"});
                table1.AddRow(new string[] {
                            "item2",
                            "Main",
                            "3"});
#line 13
 testRunner.Given("a list of menu items", ((string)(null)), table1, "Given ");
#line hidden
#line 17
 testRunner.When("order is checked out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then("the total cost should be 29.80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify successful addition of items in checkout list")]
        [NUnit.Framework.CategoryAttribute("addNewItemsToItemList")]
        public virtual void VerifySuccessfulAdditionOfItemsInCheckoutList()
        {
            string[] tagsOfScenario = new string[] {
                    "addNewItemsToItemList"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify successful addition of items in checkout list", null, new string[] {
                        "addNewItemsToItemList"});
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table2.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "2"});
                table2.AddRow(new string[] {
                            "item2",
                            "Main",
                            "3"});
#line 23
 testRunner.Given("a list of menu items", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table3.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "2"});
                table3.AddRow(new string[] {
                            "item3",
                            "Main",
                            "1"});
                table3.AddRow(new string[] {
                            "item4",
                            "Main",
                            "1"});
#line 27
 testRunner.When("following items are added to the checkout list", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table4.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "4"});
                table4.AddRow(new string[] {
                            "item2",
                            "Main",
                            "3"});
                table4.AddRow(new string[] {
                            "item3",
                            "Main",
                            "1"});
                table4.AddRow(new string[] {
                            "item4",
                            "Main",
                            "1"});
#line 32
 testRunner.Then("checkout list should be updated to", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify items are correctly removed from the checkout list")]
        [NUnit.Framework.CategoryAttribute("deleteItemsFromList")]
        public virtual void VerifyItemsAreCorrectlyRemovedFromTheCheckoutList()
        {
            string[] tagsOfScenario = new string[] {
                    "deleteItemsFromList"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify items are correctly removed from the checkout list", null, new string[] {
                        "deleteItemsFromList"});
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table5.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "2"});
                table5.AddRow(new string[] {
                            "item2",
                            "Main",
                            "3"});
                table5.AddRow(new string[] {
                            "item3",
                            "Main",
                            "1"});
                table5.AddRow(new string[] {
                            "item4",
                            "Main",
                            "1"});
#line 42
 testRunner.Given("a list of menu items", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table6.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "1"});
                table6.AddRow(new string[] {
                            "item2",
                            "Main",
                            "5"});
                table6.AddRow(new string[] {
                            "item3",
                            "Main",
                            "1"});
                table6.AddRow(new string[] {
                            "item4",
                            "Main",
                            "1"});
                table6.AddRow(new string[] {
                            "item5",
                            "Main",
                            "1"});
#line 48
 testRunner.When("following items are deleted from the checkout list", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table7.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "1"});
#line 55
 testRunner.Then("checkout list should be updated to", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify item quantities are being updated correctly")]
        [NUnit.Framework.CategoryAttribute("updateItemQuantity")]
        public virtual void VerifyItemQuantitiesAreBeingUpdatedCorrectly()
        {
            string[] tagsOfScenario = new string[] {
                    "updateItemQuantity"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify item quantities are being updated correctly", null, new string[] {
                        "updateItemQuantity"});
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table8.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "2"});
                table8.AddRow(new string[] {
                            "item2",
                            "Main",
                            "3"});
#line 62
 testRunner.Given("a list of menu items", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table9.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "1"});
                table9.AddRow(new string[] {
                            "item2",
                            "Main",
                            "1"});
#line 66
 testRunner.When("quantities of the following items are updated", ((string)(null)), table9, "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "itemName",
                            "itemType",
                            "itemQuantity"});
                table10.AddRow(new string[] {
                            "item1",
                            "Starter",
                            "1"});
                table10.AddRow(new string[] {
                            "item2",
                            "Main",
                            "1"});
#line 70
 testRunner.Then("checkout list should be updated to", ((string)(null)), table10, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
